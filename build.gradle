plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'io.spring.dependency-management' version '1.1.4'
    // Remove the Spring Boot plugin for libraries
}

group = 'io.github.kasunmadhumal'
version = '1.0.0'

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
    withSourcesJar()
    withJavadocJar()
}

// Add Spring Boot BOM for dependency management without the plugin
dependencyManagement {
    imports {
        mavenBom 'org.springframework.boot:spring-boot-dependencies:3.2.1'
    }
}

dependencies {
    api 'org.springframework.boot:spring-boot-starter-data-jpa'
    api 'org.springframework.boot:spring-boot-starter-validation'
    api 'org.springframework.boot:spring-boot-starter-web'
    api 'org.springframework:spring-tx'
    api 'org.springframework.data:spring-data-jpa'
    compileOnly 'jakarta.persistence:jakarta.persistence-api'
    api 'jakarta.validation:jakarta.validation-api'
    implementation 'org.hibernate.validator:hibernate-validator'
    api 'com.fasterxml.jackson.core:jackson-databind'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    api 'org.slf4j:slf4j-api'

    testRuntimeOnly 'com.h2database:h2'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation 'org.mockito:mockito-core'
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.compilerArgs.addAll(['-parameters', '--enable-preview'])
}

tasks.withType(Test) {
    useJUnitPlatform()
    jvmArgs '--enable-preview'
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }
    maxHeapSize = "1g"
}

jar {
    enabled = true
    archiveClassifier = ''

    manifest {
        attributes(
                'Implementation-Title': 'CRUD Killer Framework',
                'Implementation-Version': project.version,
                'Implementation-Vendor': 'CRUD Killer'
        )
    }
}

javadoc {
    options.addBooleanOption('html5', true)
    options.encoding = 'UTF-8'
    options.addStringOption('Xdoclint:none', '-quiet')
    failOnError = false
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java

            versionMapping {
                allVariants {
                    fromResolutionResult()
                }
            }

            pom {
                name = 'CRUD Killer Framework'
                description = 'A comprehensive Java 21 framework for Spring Boot eliminating boilerplate CRUD code'
                url = 'https://github.com/kasunmadhumal/crud-killer'

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id = 'kasunmadhumal'
                        name = 'Kasun Madhumal'
                    }
                }

                scm {
                    connection = 'scm:git:git://github.com/kasunmadhumal/crud-killer.git'
                    url = 'https://github.com/kasunmadhumal/crud-killer'
                }
            }
        }
    }

    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/kasunmadhumal/crud-killer")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_USERNAME")
                password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
            }
        }
    }
}

signing {
    required { gradle.taskGraph.hasTask("publish") }
    sign publishing.publications.maven
}